/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createForgeErrorFromDiscriminatorValue, createServiceAccountPrivateKeyFromDiscriminatorValue, type ForgeError, type ServiceAccountPrivateKey } from '../../../models/index.js';
// @ts-ignore
import { type WithKeyItemRequestBuilder, WithKeyItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {KeysGetResponse_keys}
 */
// @ts-ignore
export function createKeysGetResponse_keysFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoKeysGetResponse_keys;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {KeysGetResponse}
 */
// @ts-ignore
export function createKeysGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoKeysGetResponse;
}
/**
 * The deserialization information for the current model
 * @param KeysGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoKeysGetResponse(keysGetResponse: Partial<KeysGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "keys": n => { keysGetResponse.keys = n.getCollectionOfObjectValues<KeysGetResponse_keys>(createKeysGetResponse_keysFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param KeysGetResponse_keys The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoKeysGetResponse_keys(keysGetResponse_keys: Partial<KeysGetResponse_keys> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "accessedAt": n => { keysGetResponse_keys.accessedAt = n.getDateValue(); },
        "createdAt": n => { keysGetResponse_keys.createdAt = n.getDateValue(); },
        "kid": n => { keysGetResponse_keys.kid = n.getStringValue(); },
        "status": n => { keysGetResponse_keys.status = n.getEnumValue<KeysGetResponse_keys_status>(KeysGetResponse_keys_statusObject); },
    }
}
export interface KeysGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Contains the details of a list of keys
     */
    keys?: KeysGetResponse_keys[] | null;
}
export interface KeysGetResponse_keys extends AdditionalDataHolder, Parsable {
    /**
     * This is the most recent time an access token was generated for this service account key, in UTC format
     */
    accessedAt?: Date | null;
    /**
     * The creation time of the key, in UTC format
     */
    createdAt?: Date | null;
    /**
     * The ID of the private key
     */
    kid?: string | null;
    /**
     * The status of the key
     */
    status?: KeysGetResponse_keys_status | null;
}
export type KeysGetResponse_keys_status = (typeof KeysGetResponse_keys_statusObject)[keyof typeof KeysGetResponse_keys_statusObject];
/**
 * Builds and executes requests for operations under /service-accounts/{serviceAccountId}/keys
 */
export interface KeysRequestBuilder extends BaseRequestBuilder<KeysRequestBuilder> {
    /**
     * Gets an item from the APS.serviceAccounts.item.keys.item collection
     * @param keyId The ID of the private key
     * @returns {WithKeyItemRequestBuilder}
     */
     byKeyId(keyId: string) : WithKeyItemRequestBuilder;
    /**
     * Lists all keys associated with the service account. This operation will only return key metadata, not the private or public key.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<KeysGetResponse>}
     * @throws {ForgeError} error when the service returns a 400 status code
     * @throws {ForgeError} error when the service returns a 401 status code
     * @throws {ForgeError} error when the service returns a 404 status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<KeysGetResponse | undefined>;
    /**
     * Creates a service account key. A service account key is a public-private key pair, generated using RSA with a key length of 2048 bits by the Identity Authorization Service (AuthZ).The private key is returned once during its creation. AuthZ only stores the public key.A service account can have up to 3 keys at any given time.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ServiceAccountPrivateKey>}
     * @throws {ForgeError} error when the service returns a 400 status code
     * @throws {ForgeError} error when the service returns a 401 status code
     * @throws {ForgeError} error when the service returns a 403 status code
     * @throws {ForgeError} error when the service returns a 404 status code
     */
     post(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ServiceAccountPrivateKey | undefined>;
    /**
     * Lists all keys associated with the service account. This operation will only return key metadata, not the private or public key.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Creates a service account key. A service account key is a public-private key pair, generated using RSA with a key length of 2048 bits by the Identity Authorization Service (AuthZ).The private key is returned once during its creation. AuthZ only stores the public key.A service account can have up to 3 keys at any given time.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param KeysGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeKeysGetResponse(writer: SerializationWriter, keysGetResponse: Partial<KeysGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!keysGetResponse || isSerializingDerivedType) { return; }
    writer.writeCollectionOfObjectValues<KeysGetResponse_keys>("keys", keysGetResponse.keys, serializeKeysGetResponse_keys);
    writer.writeAdditionalData(keysGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param KeysGetResponse_keys The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeKeysGetResponse_keys(writer: SerializationWriter, keysGetResponse_keys: Partial<KeysGetResponse_keys> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!keysGetResponse_keys || isSerializingDerivedType) { return; }
    writer.writeDateValue("accessedAt", keysGetResponse_keys.accessedAt);
    writer.writeDateValue("createdAt", keysGetResponse_keys.createdAt);
    writer.writeStringValue("kid", keysGetResponse_keys.kid);
    writer.writeEnumValue<KeysGetResponse_keys_status>("status", keysGetResponse_keys.status);
    writer.writeAdditionalData(keysGetResponse_keys.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const KeysRequestBuilderUriTemplate = "{+baseurl}/service-accounts/{serviceAccountId}/keys";
/**
 * The status of the key
 */
export const KeysGetResponse_keys_statusObject = {
    ENABLED: "ENABLED",
    DISABLED: "DISABLED",
} as const;
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const KeysRequestBuilderNavigationMetadata: Record<Exclude<keyof KeysRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byKeyId: {
        requestsMetadata: WithKeyItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["keyId"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const KeysRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: KeysRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createForgeErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createForgeErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createForgeErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createKeysGetResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: KeysRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createForgeErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createForgeErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createForgeErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createForgeErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createServiceAccountPrivateKeyFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
