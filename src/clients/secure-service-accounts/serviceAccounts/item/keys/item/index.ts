/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createForgeErrorFromDiscriminatorValue, serializeEnableServiceAccountKeyRequest, type EnableServiceAccountKeyRequest, type ForgeError } from '../../../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /service-accounts/{serviceAccountId}/keys/{keyId}
 */
export interface WithKeyItemRequestBuilder extends BaseRequestBuilder<WithKeyItemRequestBuilder> {
    /**
     * Deletes an existing key.Errors:| status code | title                 | detail                                             ||-------------|-----------------------|---------------------------------------------------------------|| 400         | invalid_request       | The service account is not currently in an enabled state.     || 401         | unauthorized          | The token has expired or is invalid.                          || 401         | unauthorized          | The token should be a two-legged token.                       | | 404         | not_found             | The service account is not found.                             || 404         | not_found             | The key is not found.                                          |
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ForgeError} error when the service returns a 400 status code
     * @throws {ForgeError} error when the service returns a 401 status code
     * @throws {ForgeError} error when the service returns a 404 status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Enables or disables a service account key.
     * @param body The request body for enable or disable service account key
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ForgeError} error when the service returns a 400 status code
     * @throws {ForgeError} error when the service returns a 401 status code
     * @throws {ForgeError} error when the service returns a 404 status code
     */
     patch(body: EnableServiceAccountKeyRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Deletes an existing key.Errors:| status code | title                 | detail                                             ||-------------|-----------------------|---------------------------------------------------------------|| 400         | invalid_request       | The service account is not currently in an enabled state.     || 401         | unauthorized          | The token has expired or is invalid.                          || 401         | unauthorized          | The token should be a two-legged token.                       | | 404         | not_found             | The service account is not found.                             || 404         | not_found             | The key is not found.                                          |
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Enables or disables a service account key.
     * @param body The request body for enable or disable service account key
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: EnableServiceAccountKeyRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const WithKeyItemRequestBuilderUriTemplate = "{+baseurl}/service-accounts/{serviceAccountId}/keys/{keyId}";
/**
 * Metadata for all the requests in the request builder.
 */
export const WithKeyItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithKeyItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createForgeErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createForgeErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createForgeErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    patch: {
        uriTemplate: WithKeyItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createForgeErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            401: createForgeErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            404: createForgeErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeEnableServiceAccountKeyRequest,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
